version: '3'

services:
 
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq-server
    ports:
      - 15672:15672
      - 5672:5672
    environment:
      - RABBITMQ_ERLANG_COOKIE=${AMQP_COOKIE}
      - RABBITMQ_DEFAULT_USER=${AMQP_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${AMQP_PASSWORD}
    env_file:
      - .env.production
    networks:
      - orderly-net

  postgres:
    image: postgres:latest
    container_name: postgres-database
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data/postgres
    env_file:
      - .env.production
    volumes:
      - postgres:/data/postgres
    networks:
      - orderly-net
    restart: unless-stopped

  api:
    build: .
    container_name: node-api
    # ports:
    #   - 3000:3000
    networks:
      - orderly-net
    depends_on:
      - rabbitmq
      - postgres
    restart: on-failure
    links:
      - postgres
      - rabbitmq
    env_file:
      - .env.production

  kong:
    image: "kong:3.3.1-alpine"
    container_name: kong-stateless
    volumes:
     - ./kong-config.yml:/tmp/kong-config.yml
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /tmp/kong-config.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_LOG_LEVEL: debug
      KONG_PLUGINS: bundled
    restart: on-failure
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - kong-net
      - orderly-net
    ports:
      - 8000:8000 # disponivel para uso
      - 8001:8001 # api do
      - 8444:8444
      - 8443:8443
    depends_on:
      - api

networks:
  orderly-net:
    driver: bridge
  kong-net:
    external: false
    driver: bridge

volumes:
  postgres:
  kong_data: {}
